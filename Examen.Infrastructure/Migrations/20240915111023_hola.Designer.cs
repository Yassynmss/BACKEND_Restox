// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    [Migration("20240915111023_hola")]
    partial class hola
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Adress", b =>
                {
                    b.Property<int>("AdressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdressID"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId2")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BizAccountID")
                        .HasColumnType("int");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdressID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId2");

                    b.HasIndex("BizAccountID");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatCrea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatUpt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.BizAccount", b =>
                {
                    b.Property<int>("BizAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BizAccountID"), 1L, 1);

                    b.Property<DateTime>("DatCrea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatUpt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BizAccountID");

                    b.ToTable("BizAccounts");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Combi", b =>
                {
                    b.Property<int>("CombiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CombiID"), 1L, 1);

                    b.Property<string>("CombiCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DisplayPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CombiID");

                    b.HasIndex("PageID");

                    b.ToTable("Combis");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Currency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyID"), 1L, 1);

                    b.Property<string>("MoneyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"), 1L, 1);

                    b.Property<int>("AdressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatCrea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatUpt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastConnection")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.HasIndex("AdressID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.CustomerReview", b =>
                {
                    b.Property<int>("CustomerReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerReviewID"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatCrea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatUpt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("CustomerReviewID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.DeliveryStatus", b =>
                {
                    b.Property<int>("DeliveryStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryStatusID"), 1L, 1);

                    b.Property<string>("DisplayDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DeliveryStatusID");

                    b.ToTable("DeliveryStatuses");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.DeliveryType", b =>
                {
                    b.Property<int>("DeliveryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryTypeID"), 1L, 1);

                    b.Property<string>("DisplayDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DeliveryTypeID");

                    b.ToTable("DeliveryTypess");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"), 1L, 1);

                    b.Property<string>("AnimationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CombiID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerReviewID")
                        .HasColumnType("int");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("int");

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemID");

                    b.HasIndex("CombiID");

                    b.HasIndex("CustomerReviewID");

                    b.HasIndex("PageID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ItemDetail", b =>
                {
                    b.Property<int>("ItemDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemDetailID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.HasKey("ItemDetailID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LanguageID");

                    b.ToTable("ItemDetails");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ItemPrice", b =>
                {
                    b.Property<int>("ItemPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemPriceID"), 1L, 1);

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DisplayPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemPriceID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageID"), 1L, 1);

                    b.Property<string>("DisplayCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"), 1L, 1);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BizAccountID")
                        .HasColumnType("int");

                    b.Property<string>("HtmlDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("BizAccountID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.MenuPage", b =>
                {
                    b.Property<int>("MenuPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuPageID"), 1L, 1);

                    b.Property<string>("AnimationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("PageOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuPageID");

                    b.HasIndex("MenuID");

                    b.ToTable("MenuPages");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BizAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatusID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BizAccountID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeliveryStatusID");

                    b.HasIndex("DeliveryTypeID");

                    b.ToTable("Orderss");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"), 1L, 1);

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("ItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Adress", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", null)
                        .WithMany("Adresses")
                        .HasForeignKey("ApplicationUserId2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Examen.ApplicationCore.Domain.BizAccount", null)
                        .WithMany("Adresses")
                        .HasForeignKey("BizAccountID");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ApplicationUser", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Role", "Role")
                        .WithOne("User")
                        .HasForeignKey("Examen.ApplicationCore.Domain.ApplicationUser", "RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Combi", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.MenuPage", "MenuPage")
                        .WithMany("Combis")
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuPage");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Customer", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Adress", "Adress")
                        .WithMany("Customers")
                        .HasForeignKey("AdressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.CustomerReview", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Customer", "Customer")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Order", "Order")
                        .WithOne("CustomerReview")
                        .HasForeignKey("Examen.ApplicationCore.Domain.CustomerReview", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Item", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Combi", "Combi")
                        .WithMany("Items")
                        .HasForeignKey("CombiID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.CustomerReview", "CustomerReview")
                        .WithMany()
                        .HasForeignKey("CustomerReviewID");

                    b.HasOne("Examen.ApplicationCore.Domain.MenuPage", "MenuPage")
                        .WithMany("Items")
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combi");

                    b.Navigation("CustomerReview");

                    b.Navigation("MenuPage");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ItemDetail", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Item", "Item")
                        .WithMany("ItemDetails")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Language", "Language")
                        .WithMany("ItemDetails")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ItemPrice", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Currency", "Currency")
                        .WithMany("ItemPrices")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Item", "Item")
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Menu", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany("Menus")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Examen.ApplicationCore.Domain.BizAccount", null)
                        .WithMany("Menus")
                        .HasForeignKey("BizAccountID");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.MenuPage", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Menu", "Menu")
                        .WithMany("MenuPages")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Order", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.BizAccount", null)
                        .WithMany("Orders")
                        .HasForeignKey("BizAccountID");

                    b.HasOne("Examen.ApplicationCore.Domain.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("Examen.ApplicationCore.Domain.DeliveryStatus", "DeliveryStatus")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.DeliveryType", "DeliveryType")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("DeliveryType");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.OrderDetail", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Item", "Item")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Adress", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Menus");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.BizAccount", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Menus");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Combi", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Currency", b =>
                {
                    b.Navigation("ItemPrices");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Customer", b =>
                {
                    b.Navigation("CustomerReviews");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.DeliveryStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.DeliveryType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Item", b =>
                {
                    b.Navigation("ItemDetails");

                    b.Navigation("ItemPrices");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Language", b =>
                {
                    b.Navigation("ItemDetails");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Menu", b =>
                {
                    b.Navigation("MenuPages");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.MenuPage", b =>
                {
                    b.Navigation("Combis");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Order", b =>
                {
                    b.Navigation("CustomerReview");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Role", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
